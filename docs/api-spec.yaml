openapi: 3.0.0
info:
  title: TherapistTrack
  version: 1.0.0
  description: Documentación de API generada por Swagger
  contact:
    name: Soporte API
servers:
  - url: 'http://localhost:3001'

tags:
  - name: Gestión de usuarios
    description: Gestión de usuarios, incluyendo registro, actualización y eliminación.
  - name: Plantillas de Paciente/Expediente
    description: Gestión de plantillas de paciente y expediente.
  - name: Plantillas de Archivo
    description: Gestión de plantillas de archivos.
  - name: Operaciones de expedientes
    description: |
      Los expedientes guardan información y archivos sobre un paciente, para ello siguen el patron definido por plantillas, en ellas se define el tipo de campo.

      _Se buscara ser muy rigoroso con que los datos guardados sigan el tipo especificado por la plantilla_. Actualmente estos son los tipos soportados:

      **SHORT_TEXT & TEXT**: guardado de cadenas de texto.

      **DATE**: Debe estar en formato ISO8601 (ex: 2024-10-13T14:30:00Z)

      **NUMBER & FLOAT**: Datos enteros y decimales respectivamente.

      **CHOICE**: Guarda campos con opciones de seleccion predefinidas.

  - name: Operaciones de archivo
    description: | 
      Operaciones relacionadas con la gestión de archivos. Todas las request que consistan en enviar o recibir un archivo, se manejaran con un formato 
      diferente a JSON, llamado `multipart/form-data`, para ello se recomienda primero leer estos articulos para entender como funciona el formato:

      - [what the heck is multipart/form-data???](https://varaprasadh.medium.com/what-the-heck-is-multipart-form-data-8df091d598b5)
      - [A strategy for handling multiple file uploads using JavaScript](https://medium.com/typecode/a-strategy-for-handling-multiple-file-uploads-using-javascript-eb00a77e15f)
      
      Para ello necesitarán usar el constructor [FormData()](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest_API/Using_FormData_Objects) para poder formatear los datos según el estilo multipart-form-Data

      ### Pero como un pequeño Intro
        Los multipart-form-data estan compuestos por campos. Cada campo especifica el formato de la información con el atributo `Content-Type`. Los fields estan separados por guiones seguidos de una string random. 
        Dado que cada campo puede especificar su tipo, las request puede tener formato mixto, de ahi el *multipart*

        Este formato es optimo para enviar grandes cantidades de datos como imagenes, o documentos.
      ```
        POST /upload HTTP/1.1
        Host: example.com
        Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Length: 800

        ------WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Disposition: form-data; name="metadata"
        Content-Type: application/json

        {
            "userId": "12345",
            "description": "Este es el archivo que vamos a subir",
            "timestamp": "2024-10-26T15:30:00Z"
        }
        ------WebKitFormBoundary7MA4YWxkTrZu0gW
        Content-Disposition: form-data; name="file"; filename="imagen.jpg"
        Content-Type: image/jpeg

        <contenido binario del archivo imagen.jpg>
        ------WebKitFormBoundary7MA4YWxkTrZu0gW--
      ```

paths:
  /users/register:
    $ref: './paths/user_management.yaml#/userRegister'
  /users/update:
    $ref: './paths/user_management.yaml#/userUpdate'
  /users/delete:
    $ref: './paths/user_management.yaml#/userDelete'
  /users/list:
    $ref: './paths/user_management.yaml#/userList'
  /users/@me:
    $ref: './paths/user_management.yaml#/userMe'
  /users/{:id}:
    $ref: './paths/user_management.yaml#/userGetByID'

  /doctor/PatientTemplate:
    $ref: './paths/patient_template.yaml#/doctorPatientTemplate'
  /doctor/PatientTemplate/list:
    $ref: './paths/patient_template.yaml#/doctorPatientTemplateList'
  /doctor/PatientTemplate/fields:
    $ref: './paths/patient_template.yaml#/doctorPatientTemplateFields'

  /records/:
    $ref: './paths/record_operations.yaml#/baseRecordRoute'
  /records/search:
    $ref: './paths/record_operations.yaml#/searchRecords'
    
  /doctor/FileTemplate:
    $ref: './paths/file_template.yaml#/doctorFileTemplate'
  /doctor/FileTemplate/list:
    $ref: './paths/file_template.yaml#/doctorFileTemplateList'
  /doctor/FileTemplate/fields:
    $ref: './paths/file_template.yaml#/doctorFileTemplateFields'

  /files:
    $ref: './paths/file_operations.yaml#/baseFileRoute'
  /files/search:
    $ref: './paths/file_operations.yaml#/searchFiles'